<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>20230122</title>
      <link href="/2023/01/22/2023-01-22/"/>
      <url>/2023/01/22/2023-01-22/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="wrong password, try again" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="f5c09996f94943dfdf615ef8a38ecbfe0be78287999ff6e45424dc630ca368fb">77a66e571ed3e10db7162b0ad19abb59722161a8612f6c21b2144b330f14c5c3cd6edb6373e900e6b0a5e9b5bb9ce3efbe468b04c992e42d2520f519144195f2bd412776169efa3c5945aff5b05c741b751c9da687804943d1be94061f5360205205265b336813824c677b1b7a1c6e908925436b98f4db317e5e571d61ffae3b8eeab06934cff0772e5d47f7711e919d058add7f1602e67cac0590b69f3a23b3e8ee3f39b9c59c75021e7cd8c4feedd56f9f92bbdd9d5f5ba4841deb1625b8f73a21b6137a52c84f36c7758c02df5f64ca3865d42fc1988e1f2a5af68541028b819370c99c85690ca2bba0bc32b8aac55ba5da7316c93c88fc3574e3eb26596656953d44a249e12e0e46e543aec18b930fe93ba5eedc1014f656eb7d42168ff46acf61a885a19b28f23422ed76e514591c9724a5642415d8aa6709f1c453165efe1f83e16af6356dcbdc1e5911037b70394c631a8403aa9de06b2bdb6f48eb676cfa78fc0ff2127bb3893aedc692f64f87c8e08a8f360d18d17dd4ba0418a7e78ad3ff599f29fc891a2744d16b02c6849091fd6aa9f49bc75c819206baa84019598664868a1dd3dfbdf3651a436689d59d78a244c8c740732695340c5e0350bcd98ab01c1e878b880e49e7dd0a8405e52323a3b8a6f5d7f9ec0ede76a53bf6f8f11056dadbaf39a334c7bc3873698fe50fc1f8334055b02437a8dc31317d56a0c0fb1a6447714f17dafdc3fe4d1cd1ce507933638b416d5864a90e70ebd27273005185d67d72218d78f5e075535eb380f9f77265424a23ad217d10e3240c32045bb9229b0a89c6967d824c69926ffe832472b8c0c635486cc7abb1b1c0398e9ce80188461e0bfa4407b0f913cc6014645955d5f2f4ed251ce9731804d4949e66c97cf2b6a33e99a676f1514f748e2c4e6051d7ea560b91c279500c088d0240be655ae6ee3ec404da08d50c5c76ba03671467fe693d6798b43fd199fb0e74c41a85eb50d4fae4ba32fd79ba169302d4dc16feb9b553e51c92e06239839b64a0dfd86f92dbcd57c797be1ea5125df1a4913ec16446433e90faa485ee7eea21cb74ffd01f42b7b2c7e18807b353d05f434d76f9cdae300e1efb9bd3050bfbce1636a40aae2450fc706d39096b592be31aaf074e7f638fc46341896bcb514a7c42085c58da7c7053fc5df86fe1a064294c8168db1a6394890cbfbbc414b4c9a952c790f2f63dc583b1968ea284fcd1d41eb9523aa21a6fc11a24c6020cb9a3f0d29a247981cb25582a74d598b5280a3ca93e3b0c13bed1b37a6812c2f72b6a06da1c730812cbb9a4a52ca7db791216fc43c4d1773b3d2d4f455a9cd45c350fe646f5322d7c736151c83fbd10e4f89c8e474bdce5d8877256c120dbc3cab80cc9797fdf07eacbb568f863c7966817858446216d3955b3b94fd08fde54e46ca91acc65c952945964e51363bfb57163e75af11b9a6a499ee1417030d324d6a39937467891c1fc5e816ff2526f491985f7519e9ee180ae569f0d376f72ca7908e6813e2f36c9ac49df9b307fa59321b7d63319fb36399041c989e027879a291ba0a5faa12fa3ea6accc4723d0b5c4bede31d094706d4642b39c1d45d6e8d769fa96575b2281ad2f002f94eb1de70f36d93d446a953cf59ee5d2b32ba665687ba104941a60f7963f4574f54ac155678fe568523db40f3685dd7955ecf264c2322832e67e9eae82eb47e2696b38f89ceffb201ea707e579b2cde94d59fce9011de2b95c75881c1d38c8799dc7c3a1c526a3e311864f746b0fddc70dde56041c08ab81c9c973cba85f08b50ead8444eda7da089b5ff5bf5115c88c3496ca2097cd632f87241d23723c9914341ec1da0472fbdc67d315bc285527a50ff2d8bb077387da52461a71bd2fe1c451f0cc9990fcf89f6faaf0532bcc3bfc894d8329adfdc8e068929405f4b94ac242bbee829605cdac0ed8b9e1553871a87ca6c46f7797853d5962beadefe7411e4e11db8ed54bf45635a0c7469d5c7dcbda8239b30f9c13a6864b47a0496b07f74c66923006ca5672e110496a25906f3d402f2ab49b22cabf2569743929e0904fe5558090aab2787fba08216afe7a06a5ec389e79b9cd5472b820eea5483125d976c38a208bf59708c0dbff5a54c1183a555c4e514cd9a037e74d8f74b87c1a1b665262dbf3c19c038782a23d04f972deeca7c16d3ccd75ed6f965198bee9f605eb91d8d281d172900f784ab277044e6e86c2418f75319c53169c229bb2cb393c0d5ddae9a4ca9165e893488afd1234c4c4ab467c5e059cef53666a953dda499fe1877e24587657e5b95eabe10e7f931d4be82859f92e20ef581ebe757ffa153875cf9f5699dbfd02034cc29b7ffe84ee5bb5c0132292272d73d468def355b3027a6963ec6d87e17c5491e469a3f9c2cb625db7f9f590861ddead1e011273a54bb733e53c432c94b570947a91e7af02ba12a6dff443b67e2a6f7745eccd49a63aa9abdc58487f2d9f8c1b3f96fc5b382a905484f4109c8339859f00d97a072d79b3ef603c968d056992654c9b2b8482046449c1702feeb90fbbfcd25b347d0dc63a0872fb56a662b9bfd739eeb5f98f7df679a998ccf3b9dc42792a99146412c06e3474647ab8d48c07c9cdab5e9ea4acc829a24c81f06dbbad324fdb6d57858b3944f0c5798cc58d0facb09fc2edeb9b241f4de72334ebd900e525b0d3bd96e0029d6b43721337a87cab9702d0533149f4b8f0f21c6bf2dce8a2b1577725a370d8b70939ea139760e8daaec1bf71a9ac085a65f3e2a061eb9e223415efe2642328247a4c1eea24e674843f3e833e9eb9df6fbf37c7ff8f9687679de20bafb05c1f20bac71c1452d9468572b5bab25fb85ce1707fc69de6f7d9f6110ce5aec59d56839baa1f1a0fb7464b0b81817f6cf81ee13a190531493cb1715b11b658a5cf9c87286dcd656ca6b51603708d12c98d70e88da560b4ac215586d68c69fa26fc2c33acff312c0b62eb34bf181b839b6d8854f306730227c43a636ef45ce4e5fe0b5f8fb86130982b9c00e52a1d4dd8402318a4fb4fb142411236f78eeb494401238491ed9558cebdaf4b8dfb2af428658c57430f7607101f06c05e466583c8a1b11ad7adb6627d1d9bc0f6c43eb6c1a9c85b1ff94db76aaab2c8368cd6b6fcf177196d8883735dba656af7fc03ecda7ac9d20e035cfbe1adf10dd6e10157e0f4fddbcfc00185e286e6981890905d53013fc7b2f5aa548e636e8d0777cccd1bed9e6ce8e3fb246ebf87e82da873c6c158bb7b06364fb86d0becb00f2274b153374da2eeb8a90467f071d9f0a21ff0f466bb186b0a5b193ffdf3ea7cf36224c7a3236e0a39774290427624c2b98813d3856426c1a8f056a8a15fff0eee9223e4b76d0b91d6e26aa09c27e21e80d72203c875974c5191a466b4db4f10257f5c92d77290afbf2ec6543801971d793e192f3a75fd4674f4e4dd4973e4a7834486ab0bdd6c3b7f95220de2b15342fd0404968cf75e8f1dddbb4ae81442cf3338534dbfdb377fd28eb5c549a87053a57a755bc335838b91d738443da142652caf64e15c967694a0aaea42c8e3b9b161cbd1b82427e0cedb940f6107698d9f2876aee82f927868fd0815b2d063b07d37556eeee9143abcebff50d81ebe3132fac558486a93c39d2c799d069c051b7e9b23dba194ba5d780488a92a98990e74cfc0cf08ba2f006d90d8fd0c4e4fd4c96f52b49df9a31d346754b2277d8a980a839b1d9eb8612f649a58cc0ad43bc023c14ec4eced3768e317ec6ed2d5776afa85629ce5ec349f4e7baddf9f479819da7d4665d9f9b37fbe1e26c14790ec7ac95db00b8e3a64da7a5b762940894f7704aa66afa0f09a330af1f985ad85e6f732dbd557f01b935ce339bbcbe0d7b0bc5dc94a1d8dcf603f90e1b207cb746e41d9063ce867761ed1a8751d370f928373821bd6184e741d220995f499a6c6773145180ff70d85e0841bd3e815f6ca2085c32f99c28443a0ddb56fe678fb456b2b656c7812f3523969f758df9afbda7d6ebf0bf0b461be1997c3263e7ce5ecb22829798b63c305065533b181cb1277d9c0c111dc7899807b8c98e31ed396abcad903a5ba46eac363e3dcf1dce45e07c3a484d9c6fec8b9b06aff644a8ec157ad16105f4317fb4dfe0ea96f4f964772e45ee47064b4fa55752be7f2284ef855dc6e1870e8c729ff0f2c1dd6776b846335e5cc0cecaa376ac7fddf0b6a3890d4b843cd385203fb65bbb44717d3273077d751b50347fc3c3a5fd226b9062e985de64a8a7a614fbcb50ef0097bca9ae83a58165556fb78f4496d093067b8fe518b7fc238a38bcaa7b024736a85026d20f6f4b7dc1f80d2761905b9cc36b8a8d85f8966d57af74e9659b126c66aacc68f4f81fa13edb9fe917fd595ee2057136e8e377183c84ed72f95f77a7d4ab12562aa11dbfce899349dae58b9a41e864803776f8d6107dce18a1c41d105aa2a913c42a4503d93457fbf979c00a673f61eab8c096804c35618d12c2fc1127448431b4c67261</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">passward</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OCTA_related_works</title>
      <link href="/2022/11/02/OCTA-related-works/"/>
      <url>/2022/11/02/OCTA-related-works/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="wrong password, try again" data-whm="抱歉, 这个文章不能被纠正, 不过您还是能看看解密后的内容">  <script id="hbeData" type="hbeData" data-hmacdigest="8c4292e33fe1c268e4a7be00fb79e372302f4f82ddc1df75d9133548663e2e5a">77a66e571ed3e10db7162b0ad19abb5913c246d190a813d77e96f9bf5af26f4a916a5c7c4f96ead57bccc39ab5bfab6f09f8cdf17bc85c3e41c48c5ac76acab92bd35a36323f4d4431a8d0e9306879585178f9907cb4ef7ae46c9d9906887c21206e144dec305483033cdde508ffd9977666ea092ac3324bf31ace9676bb1787b9d0a6f7724b1a6f22e8964bfb770e5e540867b7f160cf8c4b367293c7ba8a35d6ea1365c6d10e90d4601bb6357750a73f8be16e18cfe05410123e3aeff3bc3979b3f423105c9e80195b8f1a7c3666d775aea1d78f2d2417ab117e9805dc276ad855a4abf4a8a2b34f6fc387c58664a881a348948132f8b6f836eaa40fc32671a5390a009d722c3fdd523029210aa660e92ed03cfa07ea3694bd79bba37aa69476c3853c8f1f7491586419c30b344b569bf8944f01eb1f6fd12adb3c96b7405d5c93bbfbc5fba72e13151bf7c32ac5be6852e77680853a79911dd35b7c078bfdc1e82499467d78b6960aa553789b83ffc244af9a4842d62c188cf383dc329035543150ae0d3678d477d890ff30f6bcccb97c818c18d65e66af2d28912b1c668d125e660ff3e703e2ebbe698cd52c07c277d54a3d3f6e2e5fc5775c061e407088e946b7842b843c52ef4dd9a6fa9304b1fbe3466c1d65b856081a5fa3a12ecd070d70fbbb6d81b33ed6586efe0c1f6b6c1abaf560bf3265ad274b9844eeab4079ac59a535e9c03cfb13c5bf897c7f214287fbe6cf406bd656033f65c4abd32b36c657f5e17627b24daced3ff85ee92ad793bc0bc7ae92f051338b486fd1c1c04ef5021fe322f3e75c981ba9c3e04040eaaec980d2a004c05eaf47ff0bc609e95adf6f3998abff49ddb10e4b5e5876b0b2ffb3977772f496f946cb8dc36c8422e47fb06afdd2eaad0e7f696f99a77949831eb78a7cb98f411d50ea4d710c9737b5447225dcf85cf5091a53f1f5b618d0652d943eaa3695eeb89b54dec82d04e3521c0369ccd244b56d4a6c7de125dd098ce5ddc31e6f8f234556fa596fa1a99ab145d4c3263ebc1d9b2818b6fd400b407de9aa2cb1631bc9c87ad95e83e8a827020ad0d7c4435082a2fcf913b7eed7b030e764dd6bbe7bf9d65cad1563f8e551b9ab56fa055afbe8de6d7af4e9732d4ef14218eaa9469257a8e1fc75046b58a435d30ae35e2ca5be29a4cb3129953a74ba13fe8136a712064c2ad9454793738971d699f28100e3b49a06fb3cf0ceff839cd8c4c6f1b2291bfda83acea02b9b6eee210d17c21f6a8d9957ddc417e6a5bb852d2c74ac8d2503a089ef2c6b7f0b06484d733639d826ce3103d73f3e8d6d1596166eec2e9b0934825a2991f3ac333404d4b3e734949c5c9f473a6599b7a2e1e82cef34c70a01ed5caef40cc9f8f526990f96fa50f385e1041034fb7b248c70a69098046dbea3e71e917c74d8fc517a007e7453f41ceb1513db49993f4b3e786b38f05bbb9602c708f164b1bc14bcb7c1273b899c690c4bc0aa0d6c546efe3c289cdd415a4ab5bae5a77e00a6796dbcb40cbc145fc98a7bb23858445e41b54e37c973de7181479a56769edb7c0b1260ea8dd19938b186a702b34b6de9c0b66715bbb7b1bcaccb3bfabaec7f8927e644c6ed52188cee5211fe16fef0765f6c5bf0cee09163f343dbd7e32e6f7787ab51a32203ea4ec7853659d8606c0d89ebec302202a80629071b2b744aa4646adfcfb0a6a22a5545d1ad9aedef2cb739f74b8efce0a13a1fca5aaeb6ca5b49a22e5e646ee3f23f923412f800cf450b5c4013dd4f0f9f4f31847441485f9b154ab9f06732084c432a14f6fda651c5548b7327755f1c35162fce199a610cdaab3ad6f0b4baaadb939fb4425f2da59f62f4a5c7ea24b49cb2d8519123681cdd74c571805562831eacae3a1ef47a90af86679a7a471c8cc0f9e2076c7a3a31ae256c8dee5e5d1447362ca8eff932a75c5cc2a4ea578b15836343c0718b4a807aa10e1ec6d6272197906ffc28c4502531123ea7176c8466788a33798c78d2328754c79b545fffb3d12817a14385e62f290fe954620b82e1a0763cb93aac74ec0f985c98d0ddeb1573eba57bb07bf40c7836d1855733f80b588b2768864114d5c246b6f2221c73d4e0671f87675ef623148d67e36b7968bc928d28245250fceff7cfb5c10980c9f70304e5d3e7fdce121fcf42f04aa497d7cff635cec420ef0357df524dacb1500cd858f0bf2eaca7a2fec07dc5f71ac901d5f82d0dc98fe32d281a0dda90c3fd7840b550cb1bf1a7d9cf1a8e36d30396b58fabc2c0029d6b1481660950f0c7693618940cf0f51d5618eff089c6dd0d8e5790ee5f2982e6758acffc1dec8aa7f65c2befc675d8cc1f511afee94e06acdcd40976b2d48da1c7d6776ea3c83c7bb45043eff2a6a0b394532ddc71626a288834af6e5522710244317140ced613d945f244f0f054caf0f7025b730ab622f5968b0a104a9dc1c4d1f5b829f59416095d276e0d5d53793002084d6f8225766d094753c855ad2b0ad8a3aeeaabd17df8a088494a36dcea92b3cca8ab39211a1255f0caeb1252624ef48f745d9e378d8dbf402859be663122397b430a881a3cc014ce3c4b37b497f7c254019e5b2bc5b2b026de05ec0a0f1136090f9eeff2507358448b6cb24ba668d876272971988e70b6e6c73778133a795a2857a4fffa2da8b16105842fdd7664299c3742adeb26f1924df2578d5ef11fbf3ab3cc0d30838373801b8787625283f88a2a273a90ad0bf28989c743e4166c8635473997526610b2fdef8494e61c000b486cf05b2df5e728750578d5bf49c9245504d36a5c6a54635117f5b5378926f303ca783056e341d8fae977500b879aaec8aa3b524d052ca94fd44cf576c67413418afecac5f359484a597d6c447c29f9d094ac3e36855b5ee864726870f775d1a90d687d7376a8c2934052f827da5cd974694037f26e3bce7effb08620e54ab1171982a4fb64cfd11edba4dd40030e3030e396be5520d00fb1d816c84afd2200846438e8a17ea34021f1b9459347abf34091cff1f0e9865fd62aabbf88dacf70396ceb70237c7b3fd6f0d764fc82962dc4910a11427a268226440a4f3b4114e749c3c8759f4374ff8903dba625f4971a6767b7ff7d84f0aafbf29f5cf4d59378c903b527ee4608d72f20bcea94f800c27dd3cd682b4cb82a488bbe1657ca7b71deb618693f7b84758cfe4f0377086ea5299b3b5524a0dcb7c2a8a506f038d28590592873d3a3955e608eafaf7f06b45808ff9ac237f76841f821d9df2d4cad027c60eb75b0c21692e806bebf3c053052b78315aa11d8be6d1f137b2c3a07298eb47f5e687fc34537b04bdd565fb1fd161b9260111d7fd3acec756098d9706c50f963eb92bf5fa150426a7f8f6586a735a7796202e011a3a18bd73d3c52086e906747acef9420a0bfcc9fba3ee53f6f5d6c3cc87d700093bcb41aaa6faec8e3c96d3c6bebfe1affe0709cb78908ca88f223138462cef307e33b56261a6267afe1db3729983bbafa5becaa50f456bfb777f266f83a4af7f7c5eab4aab7c779a3c9b6f576303402f85fe2081610f83496d7a5311d5ad57b2fe08f7743ade1421c5857ddf4d947ce292f0c66a657ce965b743d0a685b7f18cf0c32d499975a17e318c18921cc64c5b6c69d00033999571677690acc119e99fa5db095fd2a6e1e3d591872e2b0713cc4294f942d1cc7ec0b2f846c91742e015fa3214501c698858872d7b17bfd4f2ba581ee034279f805653d81203ce7b18cab54dac46007a3fcd417c2dcba669c0a5eb56e5287571a9f79cda9e08a570ea3697dd7e28381641738e40093daf34f9b1dcf2de651c03d3a497ad5de5cdb1fb432f86416a890036283b7a0cb8c2493a8857a881859da2cab871bbb5ef094cebca702fa4ed7dadd830f0ae77fc3063140bf1175797a0dcff1320ae99cc6242f97e3ec005328ca6b96f733b2c8abea07fc41d49d73851bee3d8f8ca407eca32f541f042dd03e68b14bef452e27209559ef976da68574f80f4842f6d46fcef9db8fee236420d248b0efeaaa0cf3b398035246d2d53666adc087259d79853824bfb2486f9cd5d7eb0ee602b8aa673f577c40bdf2b935183c005115885a6fbbf23c97525f14a132fbc82336ffbd1a8f6f4f0a8f41cae1f9fe082b899c022eaa3a3d4dec164264b427af5a26dbf4015609d928e7108bc818e43ab2b7655e96dfbaea10f2dc389cf569651dc8b75bf4b06df9daa7273ca3e467e4e184f0f69e71116a9817c88c1581aac4a92e0639ea00407028474e9529527f8ef764fac493d112a1c05eff94ae117cbd3ac5d9df2c1301d61ffd89f57ac35ed9fb92978e5df637af5dbd5579365e8d5eefcf76d8374858621667</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">password</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> CV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度学习的一些理解</title>
      <link href="/2022/10/13/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3/"/>
      <url>/2022/10/13/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="wrong password, try again" data-whm="抱歉, 这个文章不能被纠正, 不过您还是能看看解密后的内容">  <script id="hbeData" type="hbeData" data-hmacdigest="63d4e9d603a05780610d2f39a8bb7d53bf7e2abe05430f532b184b05089606e2"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">password</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于最近邻分类的手写数字识别</title>
      <link href="/2022/10/12/%E5%9F%BA%E4%BA%8E%E6%9C%80%E8%BF%91%E9%82%BB%E5%88%86%E7%B1%BB%E7%9A%84%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB/"/>
      <url>/2022/10/12/%E5%9F%BA%E4%BA%8E%E6%9C%80%E8%BF%91%E9%82%BB%E5%88%86%E7%B1%BB%E7%9A%84%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>以下皆为手写数据库的举例。<br>介绍一下一个简单的实现手写数字识别的方式——最近邻。</p><h3 id="基于PDF的机器学习模型"><a href="#基于PDF的机器学习模型" class="headerlink" title="基于PDF的机器学习模型"></a>基于PDF的机器学习模型</h3><p>假设我们有一张28<em>28大小的手写数字图片。<br>则输入$X=R^{28</em>28}$，得到输出Y为0-9的标签。</p><script type="math/tex; mode=display">f:X->Y</script><p>f 即为我们需要的分类方式。</p><h3 id="图片预处理"><a href="#图片预处理" class="headerlink" title="图片预处理"></a>图片预处理</h3><p>我们一般拿到手写数字的图片是灰度图片，拥有28<em>28=784个像素，每个像素拥有$2^8=256$的深度(彩色)信息。这里插一嘴，人眼其实只能分辨10种颜色梯度，约等于$2^7$种，但是为了方便计算机运算，规定像素的色彩梯度为$2^8=256$。<br>拿到图片之后，将其转成784</em>1的列向量。</p><h3 id="最近邻"><a href="#最近邻" class="headerlink" title="最近邻"></a>最近邻</h3><p>首先我们有一组已知$Y$标签的数据库${X}’$。<br>运用欧氏距离进行计算：</p><script type="math/tex; mode=display">\left \{\left \| X-{X}' \right \|=\sqrt{\sum_{i=1}^{784}(Xi-{Xi}')^{2}}\right \}min</script><p>其中$Xi$为单张图片的每个像素点的值，${X}’$为数据库，一般有几千上万个。<br>这种方法的本质可以抽象成计算未知和已知数据的空间距离，理所应当距离哪个已知数据越近，未知数据就应当被分类为这个已知数据。</p><h3 id="平均最近邻"><a href="#平均最近邻" class="headerlink" title="平均最近邻"></a>平均最近邻</h3><p>上述方法在实际运用时需要对比大量数据。所以引入平均最近邻的思想。<br>首先将已有的数据库进行分类均值处理，将每一类的所有图片求平均值，得到均值图片，再进行上述公式计算，这样只需要对比10张图片即可分出结果。</p>]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模式识别 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最大似然以及奥卡姆剃刀</title>
      <link href="/2021/10/12/%E6%9C%80%E5%A4%A7%E4%BC%BC%E7%84%B6%E4%BB%A5%E5%8F%8A%E5%A5%A5%E5%8D%A1%E5%A7%86%E5%89%83%E5%88%80/"/>
      <url>/2021/10/12/%E6%9C%80%E5%A4%A7%E4%BC%BC%E7%84%B6%E4%BB%A5%E5%8F%8A%E5%A5%A5%E5%8D%A1%E5%A7%86%E5%89%83%E5%88%80/</url>
      
        <content type="html"><![CDATA[<h1 id="最大似然估计"><a href="#最大似然估计" class="headerlink" title="最大似然估计"></a>最大似然估计</h1><p>已知一组数据x和结果y，知道或估计到它们的分布模式，假如是伯努利分布，最大似然估计就是可以求出一个参数使得x和y的拟合程度最好。<br>即在参数为的时候，x对应y发生的概率最大。<br>这个时候，当参数为时，x发生的概率为，结果为x时，参数为的概率就定义为似然函数，所以如果有一组数据，最大似然函数则为：</p><h1 id="奥卡姆剃刀"><a href="#奥卡姆剃刀" class="headerlink" title="奥卡姆剃刀"></a>奥卡姆剃刀</h1><p>相对于最大似然估计比较的大小。<br>而奥卡姆剃刀认为P大的占优势。<br>应用在拟合上面的例子就是平面上N个点进行线性拟合，用N-1次的函数一定可以完美拟合，但是次方数越高也就意味着这个函数越不常见，P越小。<br>这样就避免了过拟合的情况。</p>]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EM算法</title>
      <link href="/2021/10/12/EM%E7%AE%97%E6%B3%95/"/>
      <url>/2021/10/12/EM%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="Initial-Values"><a href="#Initial-Values" class="headerlink" title="Initial Values"></a>Initial Values</h3><p>首先假设我们有数据：x1.。。。xn<br>假设共有两类数据，我们可以对数据的Initial Values进行猜测。<br>猜测值：$\mu_{10}\mu_{20}$；$\pi_{10}\pi_{20}$ ；$\sigma_{10}^{2}\sigma_{20}^{2}$<br>其中$\pi_{10}\pi_{20}$为数据的先验概率。$\mu$和$\sigma$为数据遵循的高斯分布参数。下标的0代表着最初的意思。</p><h3 id="E-step"><a href="#E-step" class="headerlink" title="E-step"></a>E-step</h3><p>在此开始算法迭代。<br>首先对于每一个数据xi，计算出他们对应每个类的ric.</p><script type="math/tex; mode=display">r_{ic}=\frac{\pi_{c0}N(x_{i};\mu_{c0},\sigma_{c0}^{2})}{\pi_{c0}N(x_{i};\mu_{c0},\sigma_{c0}^{2})+\pi_{c'0}N(x_{i};\mu_{c'0},\sigma_{c'0}^{2})}</script><p>下标的i代表着x1-xn的第i个数据，c代表类别，c‘代表另一类别，假设当前c为1类，c’为2类。<br>运用这一公式，我们算出了每一个数据对应每个类的r值。<br>r11,r12,r21,r22,…,rn1,rn2</p><h3 id="M-step"><a href="#M-step" class="headerlink" title="M-step"></a>M-step</h3><p>使用E-step得到的r值，我们可以对初始值进行更新。</p><script type="math/tex; mode=display">\pi_{knew}=\frac{\sum_{i=1}^{n}r_{ik}}{n}</script><script type="math/tex; mode=display">\mu_{knew}=\frac{\sum_{i=1}^{n}r_{ik}x_i}{\sum_{i=1}^{n}r_{ik}}</script><p>协方差矩阵：</p><script type="math/tex; mode=display">\sum_{knew}=\frac{\sum_{i=1}^{n}r_{ik}(x_i-\mu_k)(x_i-\mu_k)^T}{\sum_{i=1}^{n}r_{ik}}</script><h3 id="比对"><a href="#比对" class="headerlink" title="比对"></a>比对</h3><p>将M-step得到的新值和初始值做对比，如果差值小于等于自己设定的阈值，则算法结束；如果差值大于自己设定的阈值，则将新值作为新的初始值，带入E-step循环计算，直到新值结果小于阈值。</p><h3 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h3>]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模式识别 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>决策树基础</title>
      <link href="/2021/03/12/%E5%86%B3%E7%AD%96%E6%A0%91%E5%9F%BA%E7%A1%80/"/>
      <url>/2021/03/12/%E5%86%B3%E7%AD%96%E6%A0%91%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="决策树"><a href="#决策树" class="headerlink" title="决策树"></a>决策树</h1><p>决策树大家应该都见过，直观一点就长下面这样，由根，叶，节点等等组成。</p><p><img src="https://img-blog.csdnimg.cn/20200521060617462.png" width="50%"></p><p>其实一个决策树就是对特征值空间进行了划分。假如使用x1和x2特征进行分类，使用分割值$\theta_1$到$\theta_4$进行分割，实际上就是把空间分成了ABCDE，如左图所示。</p><p><img src="https://img-blog.csdnimg.cn/20200521061022685.png" width="80%"></p><p>构建决策树的关键其实也就是在寻找特征值和分割阈值，即何时选择x1进行决策，以及$\theta$值的确认。</p><h1 id="决策树构建"><a href="#决策树构建" class="headerlink" title="决策树构建"></a>决策树构建</h1><p>构建决策树时候需要尽可能使得构建出的树越小越好，首先引入熵和信息增益的概念。</p><h2 id="熵"><a href="#熵" class="headerlink" title="熵"></a>熵</h2><p>熵这个概念应该最早是学化学的时候接触到的，用来表示目标的混乱程度。<br>用公式表示就是：</p><script type="math/tex; mode=display">H[s]=-\sum{p\log_2p}$$比如在伯努利分布中,概率分布和为1，即$P_{+}+P_{-}=1$如果$P_{+}=1$，则$P_{-}=0$,此时的熵为：$$H[s]=-P_{-}\log_2P_{-}-P_{+}\log_2P_{+}=-0-0=0</script><p>熵为0代表着结果是确定的。<br>假设$P_{+}=0.5$，则$P_{-}=0.5$,此时的熵为：</p><script type="math/tex; mode=display">H[s]=-P_{-}\log_2P_{-}-P_{+}\log_2P_{+}=1</script><p>熵最大，完全不确定x为正还是负。</p><p>构建决策树的时候也可以用基尼系数或者方差来代替熵。<br>对于特征的一组类别，计算熵的时候需要考虑权重。假设特征A有k个类别，每个类别的概率是$\frac{S_k}{S}$，则对于样本集合A来说熵为：</p><script type="math/tex; mode=display">H[A]=-\sum_{k=1}^{k}\frac{S_k}{S}\log_2\frac{S_k}{S}</script><h2 id="信息增益"><a href="#信息增益" class="headerlink" title="信息增益"></a>信息增益</h2><p>假设结果Y受到ABC三种特征的影响，则我们可以求出ABC三种因素的熵值</p><script type="math/tex; mode=display">H[A],H[B],H[C]$$定义结果Y从A中获得的信息量（info gain）为$H[Y]-H[A]$，信息增益越大也就代表着混乱程度下降越快。所以想要构建最小棵的决策树，我们就需要遵循熵最快下降原则，选取增益最大的特征作为第一个判断原则，这样逐渐的构建起决策树。## 举个例子下图为打球与否和天气情况的关系图，其中天气情况缩写如下，每个特征都对应着不同的程度：Outlook: S(unny), O(vercast), R(ainy)Temperature: H(ot), M(edium), C(ool)Humidity: H(igh), N(ormal), L(ow)Wind: S(trong), W(eak)<img src="https://img-blog.csdnimg.cn/20200521063918770.png"  width="45%">所以按照刚刚讲述的步骤，首先计算打不打球的熵：$$play = 9/14$$$$not = 5/14$$$$H(Play?) = −(9/14) /log_2(9/14)−(5/14) /log_2(5/14)=0.94</script><p>接着计算每个天气特征的熵，这里展示了一下outlook的计算熵过程：</p><p><img src="https://img-blog.csdnimg.cn/20200521064645645.png" width="50%"></p><p>Outlook: 0.246<br>Humidity: 0.151<br>Wind: 0.048<br>Temperature: 0.029<br>当计算完所有的天气特征熵并得到信息增益之后，就可以由大到小构建决策树了。<br>最终构建出的决策树如图所示：</p><p><img src="https://img-blog.csdnimg.cn/20200521065045762.png" width="70%"></p><h2 id="信息增益率"><a href="#信息增益率" class="headerlink" title="信息增益率"></a>信息增益率</h2><p>对于某些特征来说，自身的熵很小可能是因为自身发生的概率很小，这样会导致它的信息增益很大，影响决策树的构建，所以可以引入信息增益率来解决这个事情。<br>用信息增益除以本身的因素熵。</p><p>$$$$</p><h1 id="评价函数"><a href="#评价函数" class="headerlink" title="评价函数"></a>评价函数</h1><p>评价函数越小越好</p><h1 id="剪枝"><a href="#剪枝" class="headerlink" title="剪枝"></a>剪枝</h1><p>有些决策树可以实现完全的分类，但是树非常高，不怎么实用。</p><h2 id="预剪枝"><a href="#预剪枝" class="headerlink" title="预剪枝"></a>预剪枝</h2><p>构建过程中提前停止，通常可以规定树高或者其他约束</p><h2 id="后剪枝"><a href="#后剪枝" class="headerlink" title="后剪枝"></a>后剪枝</h2><p>通过改造评价函数</p>]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>catographer安装教程</title>
      <link href="/2021/02/28/catographer%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
      <url>/2021/02/28/catographer%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="cartographer的安装与配置"><a href="#cartographer的安装与配置" class="headerlink" title="cartographer的安装与配置"></a>cartographer的安装与配置</h1><p>参照<a href="https://google-cartographer-ros.readthedocs.io/en/latest/index.html">cartographer官方手册</a></p><p>按照cartographer的官方手册是完成不了cartographer安装的，主要是其中的ceres库无法下载（原因很简单。。大家都知道一些著名网站在大陆是不存在的）。在这里特地整理了一下安装步骤：<br>先安装依赖：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install -y google-mock libboost-all-dev  libeigen3-dev libgflags-dev libgoogle-glog-dev liblua5.2-dev libprotobuf-dev  libsuitesparse-dev libwebp-dev ninja-build protobuf-compiler python-sphinx  ros-kinetic-tf2-eigen libatlas-base-dev libsuitesparse-dev liblapack-dev</span><br></pre></td></tr></table></figure><br>按照官方手册前几步：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install -y python-wstool python-rosdep ninja-build</span><br></pre></td></tr></table></figure><br>接着创建工作空间，注意不要和已有的工作空间重名，否则后面会出现bash文件无法找到路径的情况。这里创建空间名为cartograph_ws。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir cartograph_ws</span><br><span class="line">cd cartograph_ws</span><br><span class="line">wstool init src</span><br><span class="line">wstool merge -t src https://raw.githubusercontent.com/googlecartographer/cartographer_ros/master/cartographer_ros.rosinstall</span><br><span class="line">wstool update -t src</span><br></pre></td></tr></table></figure><br>到了这一个wstool update -t src 的时候不出意外会报错：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fatal: unable to access &#x27;https://ceres-solver.googlesource.com/ceres-solver.git/&#x27;: Failed to connect to ceres-solver.googlesource.com</span><br><span class="line">port 443: 连接超时</span><br><span class="line">Exception caught during install: Error processing &#x27;ceres-solver&#x27; : [ceres-solver] Checkout of https://ceres-solver.googlesource.com/ceres       -solver.git version 1.12.0rc4 into /home/jack/catkin_ws/src/ceres-solver failed.</span><br></pre></td></tr></table></figure><br>这个时候打开src文件夹会发现已经下载好了cartographer和cartographer_ros，就差ceres库。</p><p>输入以下指令用第三方资源下载解决：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/ceres-solver/ceres-solver</span><br></pre></td></tr></table></figure><br>看一下文件夹，保证下载的ceres-solver在src文件夹中。<br>然后继续按照官方手册步骤：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">src/cartographer/scripts/install_proto3.sh</span><br><span class="line">sudo rosdep init</span><br><span class="line">rosdep update </span><br><span class="line">rosdep install --from-paths src --ignore-src --rosdistro=$&#123;ROS_DISTRO&#125; -y</span><br><span class="line">catkin_make_isolated --install –use-ninja</span><br><span class="line">source install_isolated/setup.bash</span><br></pre></td></tr></table></figure><br>至此cartographer安装完成。</p><h1 id="仿真demo测试"><a href="#仿真demo测试" class="headerlink" title="仿真demo测试"></a>仿真demo测试</h1><p>首先下载cartographer的2D地图测试包,随便下载一个2D 的就行（跑官方demo完整运行时间一般为半个小时到1个小时之间）：<a href="https://www.ncnynl.com/archives/201810/2783.html">这里</a>有一些2D测试包</p><p>仿真测试之前，如果你之前对PC和turtlebot进行过联机的话，需要将之前在bashrc文件里用来ssh远程登录的语句注释掉，再source一下bash文件。</p><p>进行仿真测试：启动demo演示，顺利的话就可以看到rviz启动并开始建图：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">roslaunch cartographer_ros demo_backpack_2d.launch  bag_filename:=路径/XXXX.bag</span><br></pre></td></tr></table></figure><br>上面的语句为<code>roslaunch+XXXX.launch+bag_filename:=路径/XXXX.bag</code>具体的launch文件可以自己写，这里不多做介绍。<br>官方提供了很多写好的launch文件，路径为：<code>cartographer_ws/src/cartographer_ros/cartographer_ros/launch/</code><br>保存地图，结束测试。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosrun map_server map_saver -f ’file’</span><br></pre></td></tr></table></figure></p><h1 id="枯燥无味的算法运行视频"><a href="#枯燥无味的算法运行视频" class="headerlink" title="枯燥无味的算法运行视频"></a>枯燥无味的算法运行视频</h1><p><a href="https://www.bilibili.com/read/cv3103182">av40133675</a></p>]]></content>
      
      
      <categories>
          
          <category> SLAM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速傅立叶变换FFT</title>
      <link href="/2020/10/12/%E5%BF%AB%E9%80%9F%E5%82%85%E7%AB%8B%E5%8F%B6%E5%8F%98%E6%8D%A2FFT/"/>
      <url>/2020/10/12/%E5%BF%AB%E9%80%9F%E5%82%85%E7%AB%8B%E5%8F%B6%E5%8F%98%E6%8D%A2FFT/</url>
      
        <content type="html"><![CDATA[<h3 id="FFT快速傅里叶变换介绍"><a href="#FFT快速傅里叶变换介绍" class="headerlink" title="FFT快速傅里叶变换介绍"></a>FFT快速傅里叶变换介绍</h3><p>当初学习FFT的时候就一直觉得这玩意真的是天才的创造。<br>我们知道DFT的公式:</p><script type="math/tex; mode=display">X[k]=\sum_{n=0}^{N-1}x[n]e^{-j\frac{2\pi}{N}kn}</script><p>为了方便后续推到，我们一般假设$N=2^{\mu }$<br>上述公式可以拆分成左边的奇数部分和右边的偶数部分.</p><script type="math/tex; mode=display">X[k]=\sum_{m=0}^{\frac{N}{2}-1}x[2m]e^{-j\frac{2\pi}{N}k2m}+\sum_{m=0}^{\frac{N}{2}-1}x[2m+1]e^{-j\frac{2\pi}{N}k(2m+1)}\\=\sum_{m=0}^{\frac{N}{2}-1}x[2m]e^{-j\frac{2\pi km}{\frac{N}2}}+e^{-j\frac{2\pi kn}{N}}\sum_{m=0}^{\frac{N}{2}-1}x[2m+1]e^{-j\frac{2\pi km}{\frac{N}2}}\\</script><p>将奇数部分和偶数部分分别记为$Xeven[k]$和$Xodd[k]$得到</p><script type="math/tex; mode=display">X[k]=Xe[k]+e^{-j\frac{2\pi kn}{N}}Xo[k]\\Xeven[k]=\sum_{m=0}^{\frac{N}{2}-1}x[2m]e^{-j\frac{2\pi km}{\frac{N}2}}\\Xodd[k]=\sum_{m=0}^{\frac{N}{2}-1}x[2m+1]e^{-j\frac{2\pi km}{\frac{N}2}}\\k=0,1,...,N-1</script><p>其中$k=0,1,…,N-1$对于每个k,有:<br>$C(k)=C(Multiflication,Addition)=(1,1)$<br>对于所有的k来说,$C=(N,N)$<br>那么接下来将$Xeven[k]$和$Xodd[k]$再次分为奇数项和偶数项$Xee[k]$ $Xeo[k]$和$Xoe[k]$ $Xoo[k]$<br>不断地向下分,直到不能分为止,我们就得到了下面的树状图:<br><img src="https://img-blog.csdnimg.cn/20200304004142974.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk2NjAwOA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>由于上述假设了$N=2^{\mu }$,所以树状图共有$\mu=\log_2N$级,我们定义最底层的算法复杂度为$C1$,则最顶端的算法复杂度为</p><script type="math/tex; mode=display">C\mu=(N,N)</script><p>则</p><script type="math/tex; mode=display">C\mu-1=2(\frac{N}2,\frac{N}2)=(N,N) 每组有\frac{N}2个点,共2组\\...\\...\\C\mu-i=2^{i}(\frac{N}{2^{i}},\frac{N}{2^{i}})=(N,N)每组有{2^{i}}个点,共2^{i}组\\</script><p>所以每层向上一层的计算次数都是(N,N)，求和得到总的蝶形运算次数：</p><script type="math/tex; mode=display">C=\sum_{i=1}^{N}Ci=\mu(N,N)=(N\log_2N,N\log_2N)=O(N\log_2N)</script><p>而正常的傅里叶变换为$O(N^2)$</p><p>举个例子说明这是多么大的飞跃:<br>假设计算机的单次计算速度为$T=10^{-8}sec$,共有$N=2^{20}$个数据</p><script type="math/tex; mode=display">Tdft=N^2T=10^4sec=2.8h\\Tfft=N\log_2NT=0.2sec</script><p>差了好多好多倍啊!!!</p><h3 id="MATLAB代码"><a href="#MATLAB代码" class="headerlink" title="MATLAB代码"></a>MATLAB代码</h3><p>matlab有现成的fft2函数来做快速傅里叶变换。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">%% Q3 <span class="number">2</span>D-FFT</span><br><span class="line">raw_image=imread(<span class="string">&#x27;hh.jpg&#x27;</span>); % read image</span><br><span class="line">image=im2double(rgb2gray(raw_image));</span><br><span class="line">tic % start counting</span><br><span class="line">F=fft2(image); % <span class="number">2</span>D FFT</span><br><span class="line">toc % stop counting</span><br><span class="line"><span class="title function_">subplot</span><span class="params">(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>)</span>,<span class="title function_">imshow</span><span class="params">(raw_image)</span>,<span class="title function_">title</span><span class="params">(<span class="string">&#x27;raw&#x27;</span>)</span>;</span><br><span class="line">subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>),imshow(F),title(<span class="string">&#x27;2D-FFT&#x27;</span>);</span><br></pre></td></tr></table></figure><br><img src="https://img-blog.csdnimg.cn/20200302111537421.png#pic_center?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk2NjAwOA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>用时0.001086 秒。超级快。<br>往期相关文章：<br><a href="/2020/10/12/%E6%9A%B4%E5%8A%9B%E8%AE%A1%E7%AE%97%E4%BA%8C%E7%BB%B4DFT/" title="二维DFT">二维DFT</a><br><a href="/2020/03/01/%E4%BD%BF%E7%94%A8%E4%B8%80%E7%BB%B4DFT%E5%8F%A0%E5%8A%A0%E5%AE%9E%E7%8E%B0%E5%AF%B9%E5%9B%BE%E7%89%87%E4%BA%8C%E7%BB%B4%E5%82%85%E7%AB%8B%E5%8F%B6%E5%8F%98%E6%8D%A2/" title="一维的DFT叠加方式">一维的DFT叠加方式</a></p>]]></content>
      
      
      <categories>
          
          <category> Digital Image Processing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图像处理 </tag>
            
            <tag> MATLAB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>修复easyBCD误删Windows启动引导</title>
      <link href="/2020/10/12/%E4%BF%AE%E5%A4%8DeasyBCD%E8%AF%AF%E5%88%A0Windows%E5%90%AF%E5%8A%A8%E5%BC%95%E5%AF%BC/"/>
      <url>/2020/10/12/%E4%BF%AE%E5%A4%8DeasyBCD%E8%AF%AF%E5%88%A0Windows%E5%90%AF%E5%8A%A8%E5%BC%95%E5%AF%BC/</url>
      
        <content type="html"><![CDATA[<p>今天给朋友的电脑装Ubuntu双系统的时候不小心用easyBCD误删了Windows的启动引导项。再重启电脑发现能正常进入Ubuntu，但是进不了Windows了，尝试了很多方法进行修复，在这里记录一下过程。</p><h3 id="制作Windows启动盘"><a href="#制作Windows启动盘" class="headerlink" title="制作Windows启动盘"></a>制作Windows启动盘</h3><p>下载一个win10系统。<br>磁力链接:(ed2k://%7Cfile%7Ccn_windows_10_multiple_editions_x64_dvd_6848463.iso%7C4303300608%7C94FD861E82458005A9CA8E617379856A%7C/)，大概要4、5个G，慢慢等。<br>然后用工具将下载好的镜像做成启动盘，我用的是<a href="https://sourceforge.net/projects/win32diskimager/">Win32DiskImager</a><br>在电脑的BIOS里设置U盘启动(不同的电脑型号方法不同,这里不赘述)，进入制作好的启动盘。</p><h3 id="修复BCD"><a href="#修复BCD" class="headerlink" title="修复BCD"></a>修复BCD</h3><p>进入安装界面,点击左下角下一步。<br>依次点击:“疑难解答”，“高级选项”，“命令提示符”。<br>接下来依次输入</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">diskpart <span class="comment">#选中磁盘,再输入list disk，找到电脑系统所在磁盘</span></span><br><span class="line">sel disk X <span class="comment">#选中刚刚自己发现的系统所在磁盘(X自己替换成数字)</span></span><br><span class="line">lis​​​​​​​t vol​​​​​​​ <span class="comment">#查看磁盘里各个盘符，并确定自己的win系统所在的盘符（通常为C盘)</span></span><br><span class="line">list par </span><br><span class="line">sel par <span class="number">1</span> </span><br><span class="line">assign letter=P</span><br><span class="line"><span class="keyword">exit</span> <span class="comment">#退出磁盘管理操作</span></span><br></pre></td></tr></table></figure><p>最后输入</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bcdboot x:\windows /s P： /f uefi /l zh<span class="literal">-cn</span> </span><br><span class="line"><span class="comment">#盘符x:是你自己刚刚确定的盘符,最后的/l是小写的L,不是1</span></span><br></pre></td></tr></table></figure><p>如果提示创建文件成功，就说明修复完成了,关掉代码界面选择”退出并继续windows10”，至此完成修复。</p>]]></content>
      
      
      <categories>
          
          <category> 系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>暴力计算二维DFT</title>
      <link href="/2020/10/12/%E6%9A%B4%E5%8A%9B%E8%AE%A1%E7%AE%97%E4%BA%8C%E7%BB%B4DFT/"/>
      <url>/2020/10/12/%E6%9A%B4%E5%8A%9B%E8%AE%A1%E7%AE%97%E4%BA%8C%E7%BB%B4DFT/</url>
      
        <content type="html"><![CDATA[<p>本篇直接对图片使用二维DFT公式，意在与两次一维DFT叠加的方式做对比。<br>二维DFT公式：</p><script type="math/tex; mode=display">F(u,v)=\sum_{x=0}^{M-1}\sum_{y=0}^{N-1}f(x,y)e^{-j2\pi(\frac{ux}{M}+\frac{vy}{N})}</script><h3 id="MATLAB代码"><a href="#MATLAB代码" class="headerlink" title="MATLAB代码"></a>MATLAB代码</h3><p>直接用四层循环嵌套实现公式的计算过程<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">%% Q1 <span class="number">2</span>D-DFT</span><br><span class="line">raw_image=imread(<span class="string">&#x27;hh.jpg&#x27;</span>); % read image</span><br><span class="line">image=im2double(rgb2gray(raw_image));</span><br><span class="line">[M,N]=size(image); % get the image size</span><br><span class="line">T=zeros(M,N);</span><br><span class="line">tic % start counting</span><br><span class="line"><span class="keyword">for</span> x = <span class="number">1</span>:M % <span class="keyword">for</span> every row</span><br><span class="line">    <span class="keyword">for</span> y = <span class="number">1</span>:N % <span class="keyword">for</span> every column</span><br><span class="line">        <span class="keyword">for</span> u =<span class="number">1</span>:M</span><br><span class="line">            <span class="keyword">for</span> v = <span class="number">1</span>:N</span><br><span class="line">                E = <span class="built_in">exp</span>(<span class="number">-1</span>i*<span class="number">2</span>*pi*(((u<span class="number">-1</span>)*(x<span class="number">-1</span>)/M)+((v<span class="number">-1</span>)*(y<span class="number">-1</span>)/N))); % get <span class="built_in">exp</span> kernel</span><br><span class="line">                <span class="title function_">T</span><span class="params">(x,y)</span> = T(x,y) + image(u,v)*E;</span><br><span class="line">            end</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line">toc % stop counting</span><br><span class="line"><span class="title function_">subplot</span><span class="params">(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>)</span>,<span class="title function_">imshow</span><span class="params">(raw_image)</span>,<span class="title function_">title</span><span class="params">(<span class="string">&#x27;raw&#x27;</span>)</span>;</span><br><span class="line">subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>),imshow(T),title(<span class="string">&#x27;2D-DFT&#x27;</span>);</span><br></pre></td></tr></table></figure><br>用我最喜欢的憨憨龟来测试</p><p><img src="https://img-blog.csdnimg.cn/20200302110900321.png#pic_center?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk2NjAwOA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>用时1081.484753 秒，可以说是最憨的一种实现方式了。<br>另一篇文章介绍了<a href="/2020/03/01/%E4%BD%BF%E7%94%A8%E4%B8%80%E7%BB%B4DFT%E5%8F%A0%E5%8A%A0%E5%AE%9E%E7%8E%B0%E5%AF%B9%E5%9B%BE%E7%89%87%E4%BA%8C%E7%BB%B4%E5%82%85%E7%AB%8B%E5%8F%B6%E5%8F%98%E6%8D%A2/" title="一维的DFT叠加方式">一维的DFT叠加方式</a></p>]]></content>
      
      
      <categories>
          
          <category> Digital Image Processing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图像处理 </tag>
            
            <tag> MATLAB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用一维DFT叠加实现对图片二维傅立叶变换</title>
      <link href="/2020/03/01/%E4%BD%BF%E7%94%A8%E4%B8%80%E7%BB%B4DFT%E5%8F%A0%E5%8A%A0%E5%AE%9E%E7%8E%B0%E5%AF%B9%E5%9B%BE%E7%89%87%E4%BA%8C%E7%BB%B4%E5%82%85%E7%AB%8B%E5%8F%B6%E5%8F%98%E6%8D%A2/"/>
      <url>/2020/03/01/%E4%BD%BF%E7%94%A8%E4%B8%80%E7%BB%B4DFT%E5%8F%A0%E5%8A%A0%E5%AE%9E%E7%8E%B0%E5%AF%B9%E5%9B%BE%E7%89%87%E4%BA%8C%E7%BB%B4%E5%82%85%E7%AB%8B%E5%8F%B6%E5%8F%98%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<p>使用两次一维DFT的叠加方式实现二维的DFT运算可以有效的减少计算成本。</p><p>一维DFT公式</p><script type="math/tex; mode=display">X[k]=\sum_{n=0}^{N-1}x[n]e^{-j\frac{2\pi}{N}kn}</script><h3 id="将DFT转化为矩阵运算"><a href="#将DFT转化为矩阵运算" class="headerlink" title="将DFT转化为矩阵运算"></a>将DFT转化为矩阵运算</h3><p>在MATLAB中，使用矩阵运算比循环更加有效率。下面展示对每一行的处理：（以256x256大小图片举例）<br>对第i行进行DFT处理，则第i行第一个元素的卷积为：<br>$x[i,1]e^{-j\frac{2\pi}{N}0<em>0}+x[i,1]e^{-j\frac{2\pi}{N}0</em>1}+…+x[i,1]e^{-j\frac{2\pi}{N}0*255}$<br>所以将每行的每个元素都进行此运算之后得到：</p><script type="math/tex; mode=display">X[i，1]=x[i,1]e^{-j\frac{2\pi}{N}0*0}+x[i,1]e^{-j\frac{2\pi}{N}0*1}+...+x[i,1]e^{-j\frac{2\pi}{N}0*255}\\X[i，2]=x[i,2]e^{-j\frac{2\pi}{N}1*0}+x[i,2]e^{-j\frac{2\pi}{N}1*1}+...+x[i,2]e^{-j\frac{2\pi}{N}1*2}\\...\\...\\X[i，256]=x[i,256]e^{-j\frac{2\pi}{N}255*0}+x[i,256]e^{-j\frac{2\pi}{N}255*1}+...+x[i,256]e^{-j\frac{2\pi}{N}255*255}</script><p>所以对于图像每一行组成的行向量，指数部分就是：<br>第1个元素：$0<em>0+0</em>1+…+0<em>255$<br>第256个元素：$255</em>0+255<em>1+…+255</em>255$<br>这种加法刚好就构成了一个向量和一个矩阵的乘法过程。</p><p>我们构建一个由0到255的列向量和0到255的行向量相乘得到的255x255大小的矩阵。姑且叫做EMatrix。</p><script type="math/tex; mode=display">e^{-j\frac{2\pi}{N}}\begin{bmatrix}0\\ ...\\ 255\end{bmatrix}*\begin{bmatrix}0 & ... & 255\end{bmatrix}=e^{-j\frac{2\pi}{N}}\begin{bmatrix} 0*0& 0*1 & ... &0*255\\  ...&  ...&  ...& ...\\  ...&  ...&  ...& ...\\  255*0&  ...&  ...&255*255 \end{bmatrix}</script><p>所以对于图片的每一行，第一个元素会对应乘上矩阵的第一行的每个元素并相加，得到对应的第一元素的X[k]，将每一行都乘以这个矩阵就可以得到对图片进行行处理的结果。</p><script type="math/tex; mode=display">X[i,:]=x[i,:]*EMatrix=\begin{bmatrix}x[i,1] & ... & ... & x[i,256]\end{bmatrix}*e^{-j\frac{2\pi}{N}}\begin{bmatrix} 0*0& 0*1 & ... &0*255\\  ...&  ...&  ...& ...\\  ...&  ...&  ...& ...\\  255*0&  ...&  ...&255*255 \end{bmatrix}</script><p>下一步就是对图片的每一列进行相同的步骤，不过注意列向量拿出来之后需要转置再乘EMatrix再转置得到对应列的结果。</p><h2 id="MATLAB代码"><a href="#MATLAB代码" class="headerlink" title="MATLAB代码"></a>MATLAB代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">%% Q2 <span class="number">1</span>D-DFT</span><br><span class="line">raw_image=imread(<span class="string">&#x27;hh.jpg&#x27;</span>); % read image</span><br><span class="line">image=im2double(rgb2gray(raw_image));</span><br><span class="line">[M,N]=size(image);</span><br><span class="line">one_d1=zeros(M,N); % x-dimention</span><br><span class="line">one_d2=zeros(M,N);% y-dimention</span><br><span class="line">k=<span class="number">0</span>:<span class="number">1</span>:<span class="number">255</span>; </span><br><span class="line">n=<span class="number">0</span>:<span class="number">1</span>:<span class="number">255</span>;</span><br><span class="line">kn=k<span class="number">&#x27;</span>*n; % get <span class="built_in">exp</span> kernel</span><br><span class="line">E=<span class="built_in">exp</span>(<span class="number">-1</span>i*<span class="number">2</span>*pi/<span class="number">256</span>).^(kn);</span><br><span class="line">tic % start counting</span><br><span class="line"><span class="keyword">for</span> a=<span class="number">1</span>:M % <span class="keyword">for</span> every row</span><br><span class="line">    one_d1(a,:)=image(a,:)*E;</span><br><span class="line">end</span><br><span class="line"><span class="keyword">for</span> b=<span class="number">1</span>:N % <span class="keyword">for</span> every column</span><br><span class="line">    one_d2(:,b)=(one_d1(:,b)<span class="string">&#x27;*E)&#x27;</span>;</span><br><span class="line">end</span><br><span class="line">toc % stop counting</span><br><span class="line">subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>),imshow(raw_image),title(<span class="string">&#x27;raw&#x27;</span>);</span><br><span class="line">subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>),imshow(one_d2),title(<span class="string">&#x27;1D-DFT&#x27;</span>);</span><br></pre></td></tr></table></figure><p>用我最喜欢的憨憨龟来测试一下</p><p><img src="https://img-blog.csdnimg.cn/20200227081919736.png#pic_center?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk2NjAwOA==,size_16,color_FFFFFF,t_70" alt="憨憨"></p><p>用时0.014302秒，相比于直接用公式计算2D的DFT要快非常多。</p><p>提到傅里叶变换就不得不提到<a href="/2020/10/12/%E5%BF%AB%E9%80%9F%E5%82%85%E7%AB%8B%E5%8F%B6%E5%8F%98%E6%8D%A2FFT/" title="快速傅立叶变换FFT">快速傅立叶变换FFT</a></p>]]></content>
      
      
      <categories>
          
          <category> Digital Image Processing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图像处理 </tag>
            
            <tag> MATLAB </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
